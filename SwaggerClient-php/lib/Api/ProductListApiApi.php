<?php
/**
 * ProductListApiApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UMAS API PROD
 *
 * These are UMAS published API availble for third party system consumption.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.47-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ProductListApiApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductListApiApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAllActiveProducts
     *
     * Retrieve all active applications/access rights for the given user.
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAllActiveProducts($user_id, $requester_id)
    {
        $this->getAllActiveProductsWithHttpInfo($user_id, $requester_id);
    }

    /**
     * Operation getAllActiveProductsWithHttpInfo
     *
     * Retrieve all active applications/access rights for the given user.
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllActiveProductsWithHttpInfo($user_id, $requester_id)
    {
        $returnType = '';
        $request = $this->getAllActiveProductsRequest($user_id, $requester_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAllActiveProductsAsync
     *
     * Retrieve all active applications/access rights for the given user.
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllActiveProductsAsync($user_id, $requester_id)
    {
        return $this->getAllActiveProductsAsyncWithHttpInfo($user_id, $requester_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllActiveProductsAsyncWithHttpInfo
     *
     * Retrieve all active applications/access rights for the given user.
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllActiveProductsAsyncWithHttpInfo($user_id, $requester_id)
    {
        $returnType = '';
        $request = $this->getAllActiveProductsRequest($user_id, $requester_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllActiveProducts'
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllActiveProductsRequest($user_id, $requester_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getAllActiveProducts'
            );
        }
        // verify the required parameter 'requester_id' is set
        if ($requester_id === null || (is_array($requester_id) && count($requester_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requester_id when calling getAllActiveProducts'
            );
        }

        $resourcePath = '/product/activeApplications/{requesterId}/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($requester_id !== null) {
            $resourcePath = str_replace(
                '{' . 'requesterId' . '}',
                ObjectSerializer::toPathValue($requester_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductForUser
     *
     * Check if a specific product is active for the given user and retrieve the product information
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $product_id Get the product specific product (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getProductForUser($user_id, $product_id, $requester_id)
    {
        $this->getProductForUserWithHttpInfo($user_id, $product_id, $requester_id);
    }

    /**
     * Operation getProductForUserWithHttpInfo
     *
     * Check if a specific product is active for the given user and retrieve the product information
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $product_id Get the product specific product (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductForUserWithHttpInfo($user_id, $product_id, $requester_id)
    {
        $returnType = '';
        $request = $this->getProductForUserRequest($user_id, $product_id, $requester_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getProductForUserAsync
     *
     * Check if a specific product is active for the given user and retrieve the product information
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $product_id Get the product specific product (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductForUserAsync($user_id, $product_id, $requester_id)
    {
        return $this->getProductForUserAsyncWithHttpInfo($user_id, $product_id, $requester_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductForUserAsyncWithHttpInfo
     *
     * Check if a specific product is active for the given user and retrieve the product information
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $product_id Get the product specific product (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductForUserAsyncWithHttpInfo($user_id, $product_id, $requester_id)
    {
        $returnType = '';
        $request = $this->getProductForUserRequest($user_id, $product_id, $requester_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductForUser'
     *
     * @param  string $user_id Get the Active product for the UserId (required)
     * @param  string $product_id Get the product specific product (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductForUserRequest($user_id, $product_id, $requester_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getProductForUser'
            );
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling getProductForUser'
            );
        }
        // verify the required parameter 'requester_id' is set
        if ($requester_id === null || (is_array($requester_id) && count($requester_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requester_id when calling getProductForUser'
            );
        }

        $resourcePath = '/product/activeApplications/{requesterId}/{userId}/{productId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($requester_id !== null) {
            $resourcePath = str_replace(
                '{' . 'requesterId' . '}',
                ObjectSerializer::toPathValue($requester_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putProductList
     *
     * Update/add access rights for users. Multiple users and access rights can be updated in one PUT call. The productID must match the existing product ID created in UMAS. The brands must match the available brands by an application. Access rights can only be updated when the duration extends the current set duration.
     *
     * @param  \Swagger\Client\Model\UserRole $body body (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putProductList($body, $requester_id)
    {
        $this->putProductListWithHttpInfo($body, $requester_id);
    }

    /**
     * Operation putProductListWithHttpInfo
     *
     * Update/add access rights for users. Multiple users and access rights can be updated in one PUT call. The productID must match the existing product ID created in UMAS. The brands must match the available brands by an application. Access rights can only be updated when the duration extends the current set duration.
     *
     * @param  \Swagger\Client\Model\UserRole $body (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putProductListWithHttpInfo($body, $requester_id)
    {
        $returnType = '';
        $request = $this->putProductListRequest($body, $requester_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putProductListAsync
     *
     * Update/add access rights for users. Multiple users and access rights can be updated in one PUT call. The productID must match the existing product ID created in UMAS. The brands must match the available brands by an application. Access rights can only be updated when the duration extends the current set duration.
     *
     * @param  \Swagger\Client\Model\UserRole $body (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putProductListAsync($body, $requester_id)
    {
        return $this->putProductListAsyncWithHttpInfo($body, $requester_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putProductListAsyncWithHttpInfo
     *
     * Update/add access rights for users. Multiple users and access rights can be updated in one PUT call. The productID must match the existing product ID created in UMAS. The brands must match the available brands by an application. Access rights can only be updated when the duration extends the current set duration.
     *
     * @param  \Swagger\Client\Model\UserRole $body (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putProductListAsyncWithHttpInfo($body, $requester_id)
    {
        $returnType = '';
        $request = $this->putProductListRequest($body, $requester_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putProductList'
     *
     * @param  \Swagger\Client\Model\UserRole $body (required)
     * @param  string $requester_id Name of the application which is calling the API, e.g. B2B. This is a freetext field. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putProductListRequest($body, $requester_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putProductList'
            );
        }
        // verify the required parameter 'requester_id' is set
        if ($requester_id === null || (is_array($requester_id) && count($requester_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requester_id when calling putProductList'
            );
        }

        $resourcePath = '/applications/{requesterId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($requester_id !== null) {
            $resourcePath = str_replace(
                '{' . 'requesterId' . '}',
                ObjectSerializer::toPathValue($requester_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
